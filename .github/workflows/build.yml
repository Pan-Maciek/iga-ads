name: Build

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'docs/**'

env:
  BUILD_PREFIX: ~/_build
  INSTALL_PREFIX: ~/_install
  BUILD_TYPE: Debug
  GALOIS: ON
  MUMPS: ON

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install apt packages
        run: |
          sudo apt-get update
          sudo apt-get install \
            libblas-dev \
            liblapack-dev \
            libboost1.71-dev \
            libboost-serialization1.71-dev \
            libboost-iostreams1.71-dev \
            libmumps-dev

      - name: Configure environment
        run: echo "CMAKE_BUILD_PARALLEL_LEVEL=$(nproc)" >> $GITHUB_ENV

      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-libs
        with:
          path: ${{ env.INSTALL_PREFIX }}
          key: libs

      - name: Install dependencies
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          scripts/install-dependencies.sh ${BUILD_PREFIX} ${INSTALL_PREFIX}

      - name: Configure
        run: |
          mkdir build
          cmake -S . -B build \
               -D CMAKE_PREFIX_PATH=${INSTALL_PREFIX} \
               -D CMAKE_BUILD_TYPE=${BUILD_TYPE} \
               -D ADS_USE_GALOIS=${GALOIS} \
               -D ADS_USE_MUMPS=${MUMPS} \
               -D BUILD_TESTING=ON

      - name: Build library
        run: cmake --build build --target ADS

      - name: Build examples
        run: cmake --build build --target ads-examples

      - name: Build tools
        run: cmake --build build --target ads-tools

      - name: Build tests
        run: cmake --build build --target ads-suite

      - name: Test
        run: ctest --test-dir build --output-on-failure

  check-format:
    name: "Code formatting"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup clang-format
        run: |
          sudo update-alternatives --remove-all clang-format
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-12 100

      - name: Run clang-format
        run: scripts/format.py check

  check-spelling:
    name: "Spelling"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install codespell
        run: |
          sudo apt-get update
          sudo apt-get install codespell

      - name: Run codespell
        run: scripts/spelling.sh

  check-header-guards:
    name: "Header guards"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check header guards
        run: scripts/guards.py check

  check-copyright:
    name: "Copyright"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check copyright headers
        run: scripts/copyright.py check

name: Build

on:
  push:
    paths-ignore:
      - 'README.md'
      - 'docs/**'

env:
  BUILD_PREFIX: ~/_build
  INSTALL_PREFIX: ~/_install
  BUILD_TYPE: Debug
  GALOIS: ON
  MUMPS: ON

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        cxx: [GCC-7, GCC-8, GCC-9, GCC-10, GCC-11, Clang-6, Clang-10, Clang-12]
        build-type: [Release]
        galois: [ON]
        mumps: [ON]

        include:
          - cxx: gcc-10
            build-type: Release
            galois: ON
            mumps: OFF

          - cxx: gcc-10
            build-type: Release
            galois: OFF
            mumps: ON

          - cxx: gcc-10
            build-type: Release
            galois: OFF
            mumps: OFF

    name: >
      ${{ matrix.cxx }}
      ${{ matrix.build-type }}
      (${{ matrix.galois == 'ON' && 'Galois' || '' }}
      ${{ matrix.mumps == 'ON' && 'MUMPS' || '' }})

    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare for building
        uses: ./.github/actions/prepare
        with:
          cxx: ${{ matrix.cxx }}

      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-libs
        with:
          path: ${{ env.INSTALL_PREFIX }}
          key: libs

      - name: Install dependencies
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: scripts/install-dependencies.sh ${BUILD_PREFIX} ${INSTALL_PREFIX}

      - name: Configure
        uses: ./.github/actions/configure
        with:
          cxx-flags: -Werror -fdiagnostics-color=always
          build-type: ${{ matrix.build-type }}
          use-galois: ${{ matrix.galois }}
          use-mumps: ${{ matrix.mumps }}

      - name: Build library
        run: cmake --build build --target ADS

      - name: Build examples
        run: cmake --build build --target ads-examples

      - name: Build tools
        run: cmake --build build --target ads-tools

      - name: Build tests
        run: cmake --build build --target ads-suite

      - name: Test
        run: ctest --test-dir build --output-on-failure

  sanitize:
    name: "Sanitizers"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare for building
        uses: ./.github/actions/prepare
        with:
          cxx: Clang-12

      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-libs
        with:
          path: ${{ env.INSTALL_PREFIX }}
          key: libs

      - name: Install dependencies
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: scripts/install-dependencies.sh ${BUILD_PREFIX} ${INSTALL_PREFIX}

      - name: Configure
        uses: ./.github/actions/configure
        with:
          build-type: Debug
          use-galois: ON
          use-mumps: ON
          use-sanitizers: "address;undefined"

      - name: Build tests
        run: cmake --build build --target ads-suite

      - name: Test
        run: ctest --test-dir build --output-on-failure

  coverage:
    name: "Code coverage"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare for building
        uses: ./.github/actions/prepare
        with:
          cxx: Clang-12

      - name: Cache dependencies
        uses: actions/cache@v2
        id: cache-libs
        with:
          path: ${{ env.INSTALL_PREFIX }}
          key: libs

      - name: Install dependencies
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: scripts/install-dependencies.sh ${BUILD_PREFIX} ${INSTALL_PREFIX}

      - name: Setup tools
        run: |
          sudo update-alternatives --install /usr/bin/llvm-profdata llvm-profdata /usr/bin/llvm-profdata-12 100
          sudo update-alternatives --install /usr/bin/llvm-cov llvm-cov /usr/bin/llvm-cov-12 100

      - name: Configure
        uses: ./.github/actions/configure
        with:
          cxx-flags: -fprofile-instr-generate -fcoverage-mapping -O0 -fno-inline -fno-elide-constructors
          build-type: Debug
          use-galois: ON
          use-mumps: ON

      - name: Build tests
        run: cmake --build build --target ads-suite

      - name: Generate coverage data
        env:
          LLVM_PROFILE_FILE: "ads-cov-%p.profraw"
        run: ctest --test-dir build --output-on-failure

      - name: Merge coverage data
        run: find build -name "ads-cov-*.profraw" | xargs llvm-profdata merge -sparse -o coverage.profdata

      - name: Create coverage report
        run: llvm-cov show build/tests/suite -instr-profile=coverage.profdata src/ include/ > coverage.txt

      - name: Upload to Codecov
        uses: codecov/codecov-action@v1
        with:
          files: coverage.txt

  check-format:
    name: "Code formatting"
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup clang-format
        run: |
          sudo update-alternatives --remove-all clang-format
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-12 100

      - name: Run clang-format
        run: scripts/format.py check

  check-spelling:
    name: "Spelling"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install codespell
        run: |
          sudo apt-get update
          sudo apt-get install codespell

      - name: Run codespell
        run: scripts/spelling.sh

  check-header-guards:
    name: "Header guards"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check header guards
        run: scripts/guards.py check

  check-copyright:
    name: "Copyright"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check copyright headers
        run: scripts/copyright.py check

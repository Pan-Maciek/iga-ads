---
Checks: |
    -*,

    clang-analyzer-*,

    bugprone-*,
    # to be fixed in the future,
    -bugprone-narrowing-conversions,

    cppcoreguidelines-*,
    -cppcoreguidelines-pro-bounds-pointer-arithmetic,
    -cppcoreguidelines-pro-bounds-constant-array-index,
    # leads to tons of completely unreasonable warnings,
    -cppcoreguidelines-avoid-magic-numbers,

    google-*,
    # flags passing non-const references,
    -google-runtime-references,

    hicpp-*,
    # unnamed parameters are useful in lambdas that do not use all the data,
    -hicpp-named-parameter,
    misc-*,
    performance-*,
    llvm-include-order,

    modernize-*,
    -modernize-use-nodiscard,
    -modernize-use-trailing-return-type,

    readability-*,
    # requires further thought,
    -readability-identifier-naming,
    # flags some natural constructions,
    -readability-else-after-return,
    # leads to tons of completely unreasonable warnings,
    -readability-magic-numbers,
    # quite a few such functions, this will be cleaned up in the future,
    -readability-convert-member-functions-to-static,
    # unnamed parameters are useful in lambdas that do not use all the data,
    -readability-named-parameter,


CheckOptions:
  # Naming conventions
  #
  # Members and variables sometimes use capital letters to reflect usual
  # mathematical notation

  - { key: readability-identifier-naming.NamespaceCase,           value: lower_case }

  - { key: readability-identifier-naming.ClassCase,               value: lower_case }
  - { key: readability-identifier-naming.StructCase,              value: lower_case }
  - { key: readability-identifier-naming.UnionCase,               value: lower_case }


# - { key: readability-identifier-naming.MemberCase,              value: lower_case }
  - { key: readability-identifier-naming.MemberCase,              value: aNy_CasE   }
# - { key: readability-identifier-naming.PrivateMemberCase,       value: lower_case }
  - { key: readability-identifier-naming.PrivateMemberCase,       value: aNy_CasE   }
  - { key: readability-identifier-naming.PrivateMemberSuffix,     value: _          }
  - { key: readability-identifier-naming.MethodCase,              value: lower_case }
  - { key: readability-identifier-naming.PrivateMethodCase,       value: lower_case }
  - { key: readability-identifier-naming.PrivateMethodSuffix,     value: _          }

  - { key: readability-identifier-naming.EnumCase,                value: lower_case }
  - { key: readability-identifier-naming.EnumConstantCase,        value: lower_case }

  - { key: readability-identifier-naming.FunctionCase,            value: lower_case }
# - { key: readability-identifier-naming.VariableCase,            value: lower_case }
  - { key: readability-identifier-naming.VariableCase,            value: aNy_CasE   }
  - { key: readability-identifier-naming.GlobalConstantCase,      value: UPPER_CASE }

  - { key: readability-identifier-naming.TypeAliasCase,           value: lower_case }
  - { key: readability-identifier-naming.TypedefCase,             value: lower_case }
  - { key: readability-identifier-naming.ParameterCase,           value: lower_case }
  - { key: readability-identifier-naming.TemplateParameterCase,   value: CamelCase  }

  # Other settings

  # Single statements don't have to be braced
  - { key: readability-braces-around-statements.ShortStatementLines, value: 2 }

# Check all headers
HeaderFilterRegex: .*

# If needed, reformat using .clang-format
FormatStyle: file
...
